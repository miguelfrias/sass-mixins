@mixin clear {
	zoom: 1; /* For IE 6/7 (trigger hasLayout) */
	&:before,
	&:after {
	    content: "";
	    display: table;
	}
	&:after {
	    clear: both;
	}
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem($property, $values...) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';

	@for $i from 1 through $max {
		$value: strip-unit(nth($values, $i));
		$pxValues: #{$pxValues + $value*16}px;

		@if $i < $max {
			$pxValues: #{$pxValues + " "};
		}
	}

	@for $i from 1 through $max {
		$value: strip-unit(nth($values, $i));
		$remValues: #{$remValues + $value}rem;

		@if $i < $max {
			$remValues: #{$remValues + " "};
		}
	}

	#{$property}: $pxValues;
	#{$property}: $remValues;
}

@mixin respond-to($media) {
	@if $media == xsmall {
		@media only screen and (min-width: 20em) { @content; }
	}
	@else if $media == small {
		@media only screen and (min-width: 30em) { @content; }
	}
	@else if $media == medium {
		@media only screen and (min-width: 37em) { @content; }
	}
	@else if $media == large {
		@media only screen and (min-width: 48em) { @content; }
	}
	@else if $media == xlarge {
		@media only screen and (min-width: 56.25em) { @content; }
	}
}

// sets width, height and background position for a sprite image
@mixin ringtv-sprite-image($image) {
    width: image-width("#{$dir-sprite}/#{$image}.png");
    height: image-height("#{$dir-sprite}/#{$image}.png");
    background: sprite($sprite, $image) no-repeat;
}


// creates arrows without the need of an image
@mixin arrow($width: 20px, $height: 20px, $direction: up, $color: gray, $hover_color: lightgray) {
    $width_div_2: $width / 2;
    $height_div_2: $height / 2;

    // Right
    @if $direction == right {
        width: 0px;
        height: 0px;
        border-style: solid;
        border-width: $height_div_2 0 $height_div_2 $width;
        border-color: transparent transparent transparent $color;
        
        &:hover {
            border-color: transparent transparent transparent $hover_color;
        }
    }

    // Left
    @if $direction == left {
        width: 0;
        height: 0;
        border-style: solid;
        border-width: $height_div_2 $width $height_div_2 0;
        border-color: transparent $color transparent transparent;

        &:hover {
            border-color: transparent $hover_color transparent transparent;
        }
    }

    // Up
    @if $direction == up {
        width: 0;
        height: 0;
        border-style: solid;
        border-width: 0 $width_div_2 $height $width_div_2;
        border-color: transparent transparent $color transparent;

        &:hover {
            border-color: transparent transparent $hover_color transparent;
        }
    }

    // Down
    @if $direction == down {
        width: 0;
        height: 0;
        border-style: solid;
        border-width: $height $width_div_2 0 $width_div_2;
        border-color: $color transparent transparent transparent;

        &:hover {
            border-color: $hover_color transparent transparent transparent;
        }
    }
}

@function em($px, $base: 16px) {
    @return ($px / $base) * 1rem;
}
// // renamed with a prefix to avoid conflicts with compass' mixins
// @mixin rt-background($filename, $repeat: no-repeat, $position: 0 0) {
//     background: url("#{$dir-images}/#{$filename}") $repeat $position;
// }

// // sets width, height and background position for a sprite image
// @mixin rt-sprite-image($image) {
//     width: image-width("#{$dir-sprite}/#{$image}.png");
//     height: image-height("#{$dir-sprite}/#{$image}.png");
//     background: sprite($sprite, $image) no-repeat;
// }